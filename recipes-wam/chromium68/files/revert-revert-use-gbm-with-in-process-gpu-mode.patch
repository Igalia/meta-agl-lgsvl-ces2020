From 80098ccbc16270043ce9792d840153bdaea1e603 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jose.dapena@lge.com>
Date: Fri, 22 Nov 2019 10:23:48 -0800
Subject: [PATCH] Revert "Revert "[BACKPORT] [ozone/wayland] Use gbm with
 in-process-gpu mode""

This reverts commit 5ebefe83ead91ce6fd2ac8ff9699b848a83ee0ff.
---
 .../gpu/drm_render_node_path_finder.cc        |  9 ++--
 .../wayland/gpu/drm_render_node_path_finder.h |  6 +--
 .../wayland/gpu/gbm_pixmap_wayland.cc         |  7 ++-
 .../wayland/gpu/wayland_connection_proxy.cc   |  9 ++--
 .../wayland/ozone_platform_wayland.cc         | 47 ++++++++++---------
 5 files changed, 40 insertions(+), 38 deletions(-)

diff --git a/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.cc b/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.cc
index c3367aeef5..c89309b6ba 100644
--- a/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.cc
+++ b/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.cc
@@ -23,14 +23,13 @@ constexpr uint32_t kRenderNodeEnd = kRenderNodeStart + kDrmMaxMinor + 1;
 
 }  // namespace
 
-DrmRenderNodePathFinder::DrmRenderNodePathFinder() = default;
+DrmRenderNodePathFinder::DrmRenderNodePathFinder() {
+  FindDrmRenderNodePath();
+}
 
 DrmRenderNodePathFinder::~DrmRenderNodePathFinder() = default;
 
-base::FilePath DrmRenderNodePathFinder::GetDrmRenderNodePath() {
-  if (drm_render_node_path_.empty())
-    FindDrmRenderNodePath();
-
+base::FilePath DrmRenderNodePathFinder::GetDrmRenderNodePath() const {
   return drm_render_node_path_;
 }
 
diff --git a/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.h b/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.h
index a6408e7b51..0ea3be6972 100644
--- a/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.h
+++ b/src/ui/ozone/platform/wayland/gpu/drm_render_node_path_finder.h
@@ -13,12 +13,12 @@ namespace ui {
 // A helper class that finds a DRM render node device and returns a path to it.
 class DrmRenderNodePathFinder {
  public:
+  // Triggers FindDrmRenderNodePath.
   DrmRenderNodePathFinder();
   ~DrmRenderNodePathFinder();
 
-  // Returns a path to a drm render node device. If it hasn't been found yet,
-  // triggers FindDrmRenderNodePath and returns the path.
-  base::FilePath GetDrmRenderNodePath();
+  // Returns a path to a drm render node device.
+  base::FilePath GetDrmRenderNodePath() const;
 
  private:
   void FindDrmRenderNodePath();
diff --git a/src/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc b/src/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
index 66cf781b39..abaca310ef 100644
--- a/src/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
+++ b/src/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
@@ -31,7 +31,8 @@ GbmPixmapWayland::GbmPixmapWayland(WaylandSurfaceFactory* surface_manager,
     : surface_manager_(surface_manager), connection_(connection) {}
 
 GbmPixmapWayland::~GbmPixmapWayland() {
-  connection_->DestroyZwpLinuxDmabuf(GetUniqueId());
+  if (gbm_bo_)
+    connection_->DestroyZwpLinuxDmabuf(GetUniqueId());
 }
 
 bool GbmPixmapWayland::InitializeBuffer(gfx::Size size,
@@ -39,6 +40,10 @@ bool GbmPixmapWayland::InitializeBuffer(gfx::Size size,
                                         gfx::BufferUsage usage) {
   TRACE_EVENT1("Wayland", "GbmPixmapWayland::InitializeBuffer", "size",
                size.ToString());
+
+  if (!connection_->gbm_device())
+    return false;
+
   uint32_t flags = 0;
   switch (usage) {
     case gfx::BufferUsage::GPU_READ:
diff --git a/src/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc b/src/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
index 226f6d42cc..a9f1e3fa7d 100644
--- a/src/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
+++ b/src/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
@@ -13,8 +13,7 @@ namespace ui {
 
 WaylandConnectionProxy::WaylandConnectionProxy(WaylandConnection* connection)
     : connection_(connection),
-      gpu_thread_runner_(connection_ ? nullptr
-                                     : base::ThreadTaskRunnerHandle::Get()) {}
+      gpu_thread_runner_(base::ThreadTaskRunnerHandle::Get()) {}
 
 WaylandConnectionProxy::~WaylandConnectionProxy() = default;
 
@@ -124,12 +123,10 @@ intptr_t WaylandConnectionProxy::Display() {
     return reinterpret_cast<intptr_t>(connection_->display());
 
 #if defined(WAYLAND_GBM)
-  // It must not be a single process mode. Thus, shared dmabuf approach is used,
-  // which requires |gbm_device_|.
-  DCHECK(gbm_device_);
   return EGL_DEFAULT_DISPLAY;
-#endif
+#else
   return 0;
+#endif
 }
 
 void WaylandConnectionProxy::AddBindingWaylandConnectionClient(
diff --git a/src/ui/ozone/platform/wayland/ozone_platform_wayland.cc b/src/ui/ozone/platform/wayland/ozone_platform_wayland.cc
index b8bed7de3f..1a834d04c2 100644
--- a/src/ui/ozone/platform/wayland/ozone_platform_wayland.cc
+++ b/src/ui/ozone/platform/wayland/ozone_platform_wayland.cc
@@ -129,6 +129,11 @@ class OzonePlatformWayland : public OzonePlatform {
 
   bool IsNativePixmapConfigSupported(gfx::BufferFormat format,
                                      gfx::BufferUsage usage) const override {
+    // If there is no drm render node device available, native pixmaps are not
+    // supported.
+    if (path_finder_.GetDrmRenderNodePath().empty())
+      return false;
+
     if (std::find(supported_buffer_formats_.begin(),
                   supported_buffer_formats_.end(),
                   format) == supported_buffer_formats_.end()) {
@@ -151,11 +156,7 @@ class OzonePlatformWayland : public OzonePlatform {
     if (!connection_->Initialize())
       LOG(FATAL) << "Failed to initialize Wayland platform";
 
-#if defined(WAYLAND_GBM)
-    if (!args.single_process)
-      connector_.reset(new WaylandConnectionConnector(connection_.get()));
-#endif
-
+    connector_.reset(new WaylandConnectionConnector(connection_.get()));
     cursor_factory_.reset(new BitmapCursorFactoryOzone);
     overlay_manager_.reset(new StubOverlayManager);
     input_controller_ = CreateStubInputController();
@@ -164,27 +165,23 @@ class OzonePlatformWayland : public OzonePlatform {
   }
 
   void InitializeGPU(const InitParams& args) override {
-    if (!args.single_process) {
-      proxy_.reset(new WaylandConnectionProxy(nullptr));
+    proxy_.reset(new WaylandConnectionProxy(connection_.get()));
 #if defined(WAYLAND_GBM)
-      DrmRenderNodePathFinder path_finder;
-      const base::FilePath drm_node_path = path_finder.GetDrmRenderNodePath();
-      if (drm_node_path.empty())
-        LOG(FATAL) << "Failed to find drm render node path.";
-
-      DrmRenderNodeHandle handle;
-      if (!handle.Initialize(drm_node_path))
-        LOG(FATAL) << "Failed to initialize drm render node handle.";
-
-      auto gbm = CreateGbmDevice(handle.PassFD().release());
-      if (!gbm)
-        LOG(FATAL) << "Failed to initialize gbm device.";
-
-      proxy_->set_gbm_device(std::move(gbm));
-#endif
+    const base::FilePath drm_node_path = path_finder_.GetDrmRenderNodePath();
+    if (drm_node_path.empty()) {
+      LOG(WARNING) << "Failed to find drm render node path.";
     } else {
-      proxy_.reset(new WaylandConnectionProxy(connection_.get()));
+      DrmRenderNodeHandle handle;
+      if (!handle.Initialize(drm_node_path)) {
+        LOG(WARNING) << "Failed to initialize drm render node handle.";
+      } else {
+        auto gbm = CreateGbmDevice(handle.PassFD().release());
+        if (!gbm)
+          LOG(WARNING) << "Failed to initialize gbm device.";
+        proxy_->set_gbm_device(std::move(gbm));
+      }
     }
+#endif
     gpu_platform_support_.reset(CreateStubGpuPlatformSupport());
     surface_factory_.reset(new WaylandSurfaceFactory(proxy_.get()));
   }
@@ -228,6 +225,10 @@ class OzonePlatformWayland : public OzonePlatform {
 
   std::vector<gfx::BufferFormat> supported_buffer_formats_;
 
+  // This is used both in the gpu and browser processes to find out if a drm
+  // render node is available.
+  DrmRenderNodePathFinder path_finder_;
+
   DISALLOW_COPY_AND_ASSIGN(OzonePlatformWayland);
 };
 
